// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
PATIENT
HOSPITAL_ADMIN 
SUPER_ADMIN  
}

enum AppointmentStatus {
  PENDING      
  CONFIRMED   
  CANCELED    
  COMPLETED    
}

enum AppointmentType {
IN_PERSON
VIDEO_CALL
}

enum HospitalStatus {
PENDING_REVIEW
APPROVED
REJECTED
}


model User {
id                String    @id @default(cuid())
email             String    @unique
password          String    
name              String?
phone             String?
role              Role      @default(PATIENT)
isEmailVerified   Boolean   @default(false)
createdAt         DateTime  @default(now())
updatedAt         DateTime  @updatedAt

hospitalId        String?
hospital          Hospital? @relation("AdminOfHospital", fields: [hospitalId], references: [id])
doctorId          String?
doctor            Doctor?   @relation("UserDoctor")

otp               OTP?
appointments      Appointment[] @relation("PatientAppointments")
}

model OTP {
id        String   @id @default(cuid())
code      String
expiresAt DateTime
createdAt DateTime  @default(now())
userId    String   @unique
user      User     @relation(fields: [userId], references: [id])
}


model Hospital {
id        String @id @default(cuid())
name      String
address   String
city      String
phone     String?
status    HospitalStatus @default(PENDING_REVIEW)
applicantEmail String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

admins     User[]     @relation("AdminOfHospital")
doctors    Doctor[]   @relation("HospitalDoctors")
timeSlots  TimeSlot[] @relation("HospitalTimeSlots")
appointments Appointment[] @relation("HospitalAppointments")
ambulances Ambulance[]
}

model Doctor {
id        String @id @default(cuid())
name      String
specialty String 
hospitalId String
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

userId    String? @unique
user      User? @relation("UserDoctor", fields: [userId], references: [id]) 
hospital  Hospital @relation("HospitalDoctors", fields: [hospitalId], references: [id])

appointments Appointment[] @relation("DoctorAppointments")
timeSlots TimeSlot[] @relation("DoctorTimeSlots")
}

model Service {
id          String   @id @default(cuid())
name        String   @unique
price       Int     
appointments Appointment[]
}

model Appointment {
id          String @id @default(cuid())

patientId   String
doctorId    String
hospitalId  String
serviceId   String // Link to the specific service/procedure

type        AppointmentType
status      AppointmentStatus @default(PENDING)
startTime   DateTime
endTime     DateTime
notes       String?
paymentStatus String @default("PENDING")
videoLink   String? // Populated if type is VIDEO_CALL and confirmed

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

patient    User     @relation("PatientAppointments", fields: [patientId], references: [id])
doctor     Doctor   @relation("DoctorAppointments", fields: [doctorId], references: [id])
hospital   Hospital @relation("HospitalAppointments", fields: [hospitalId], references: [id])
service    Service  @relation(fields: [serviceId], references: [id])
}

model TimeSlot {
id        String @id @default(cuid())
hospitalId String
doctorId  String? // Optional: if the slot is for a specific doctor
startTime DateTime
endTime   DateTime
isBooked  Boolean @default(false)

hospital Hospital @relation("HospitalTimeSlots", fields: [hospitalId], references: [id])
doctor   Doctor? @relation("DoctorTimeSlots", fields: [doctorId], references: [id])

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Ambulance {
id        String @id @default(cuid())
driverName String
licensePlate String @unique
region    String // Area of operation
isAvailable Boolean @default(true)
hospitalId String? // Associated with a hospital, but could be independent
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

hospital Hospital? @relation(fields: [hospitalId], references: [id])
}